(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{373:function(t,_,v){"use strict";v.r(_);var s=v(42),e=Object(s.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"_06-作用域链"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_06-作用域链"}},[t._v("#")]),t._v(" 06 | 作用域链")]),t._v(" "),v("p",[t._v("上一章我们讲了原型链，和原型链相似的有个作用域链，但千万不要把这两者搞混了。")]),t._v(" "),v("p",[v("strong",[t._v("原型链")]),t._v("是将一个个原型串起来，实现 JS 的继承。")]),t._v(" "),v("p",[v("strong",[t._v("作用域链")]),t._v("将一个个作用域串起来，实现变量的查找路径。")]),t._v(" "),v("p",[t._v("也就是说前者是查找对象的属性和方法的，后者是查找变量的。")]),t._v(" "),v("p",[t._v("那么什么是作用域呢？")]),t._v(" "),v("h2",{attrs:{id:"函数作用域和全局作用域"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#函数作用域和全局作用域"}},[t._v("#")]),t._v(" 函数作用域和全局作用域")]),t._v(" "),v("p",[t._v("每个函数执行的时候都要查找自己的作用域，我们叫做函数作用域，在执行阶段，在执行一个函数时\n当该函数需要使用某个变量或者调用了某个函数时，便会优先在该函数作用域中查找相关内容。")]),t._v(" "),v("p",[t._v("那么问题来了，如果在当前函数作用域中没有查找到变量，那么 V8 会去全局作用域中去查找，这个查找的线路就称为"),v("strong",[t._v("作用域链")]),t._v("。")]),t._v(" "),v("p",[t._v("全局作用域是在 V8 启动过程中就创建了，且一直保存在内存中不会被销毁的，直至 V8 退出。 而函数作用域是在执行该函数时创建的，当函数执行结束之后，函数作用域就随之被销毁掉了。\n全局作用域还有 window、document、opener等。\n"),v("img",{attrs:{src:"/images/589622b2f517ce06487d3edbe28cf277.jpg",alt:"全局作用域"}})]),t._v(" "),v("p",[t._v("JS 是基于"),v("strong",[t._v("词法作用域")]),t._v("的，查找的顺序是按照函数定义的位置来决定的。也称为 静态作用域。")])])}),[],!1,null,null,null);_.default=e.exports}}]);