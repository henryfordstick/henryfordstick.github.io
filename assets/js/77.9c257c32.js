(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{372:function(s,t,a){"use strict";a.r(t);var n=a(42),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"第四章-正则表达式回溯法原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第四章-正则表达式回溯法原理"}},[s._v("#")]),s._v(" 第四章 正则表达式回溯法原理")]),s._v(" "),a("p",[s._v("回溯也称为试探法，本质上就是深度优先搜索算法，其中退到之前的某一步这一过程，称为”回溯“。")]),s._v(" "),a("ul",[a("li",[s._v("一、没有回溯的匹配")]),s._v(" "),a("li",[s._v("二、有回溯的匹配")]),s._v(" "),a("li",[s._v("三、常见的回溯形式")])]),s._v(" "),a("h2",{attrs:{id:"一、没有回溯的匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、没有回溯的匹配"}},[s._v("#")]),s._v(" 一、没有回溯的匹配")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/ab{1,3}c/")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// b{1,3}表示 b 字符连续出现 1 到 3 次")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 匹配 abbbc 的时候就没有回溯")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("img",{attrs:{src:"/images/regex-%E5%9B%9E%E6%BA%AF1.png",alt:"没有回溯的匹配"}})]),s._v(" "),a("h2",{attrs:{id:"二、有回溯的匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、有回溯的匹配"}},[s._v("#")]),s._v(" 二、有回溯的匹配")]),s._v(" "),a("h5",{attrs:{id:"案例一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#案例一"}},[s._v("#")]),s._v(" 案例一")]),s._v(" "),a("p",[s._v("如果继续使用 "),a("code",[s._v("/ab{1,3}c/")]),s._v("，将上面案例中的 "),a("code",[s._v("abbbc")]),s._v(" 改成 "),a("code",[s._v("abbc")]),s._v(" 中间就有回溯了，具体回溯过程如下图所示：\n"),a("img",{attrs:{src:"/images/regex-%E5%9B%9E%E6%BA%AF2.png",alt:"有回溯的正则"}})]),s._v(" "),a("ol",[a("li",[s._v("正则从首位开始匹配字符串")]),s._v(" "),a("li",[s._v("正则中的 a 匹字符串中的 a")]),s._v(" "),a("li",[s._v("正则中的 b{1,3} 匹配字符串中的第一个 b")]),s._v(" "),a("li",[s._v("正则中的 b{1,3} 匹配字符串中的第二个 b")]),s._v(" "),a("li",[s._v("正则中的 b{1,3} 匹配字符串中的 c 时，不匹配，这里就产生"),a("strong",[s._v("回溯")])]),s._v(" "),a("li",[s._v("这时就认为 b{1,3} 已经匹配完毕，然后状态回到之前的状态，即第 4 步")]),s._v(" "),a("li",[s._v("最后用正则中的 c 匹配字符串中的 c，这时整个表达式匹配成功了。")])]),s._v(" "),a("h5",{attrs:{id:"案例二"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#案例二"}},[s._v("#")]),s._v(" 案例二")]),s._v(" "),a("p",[s._v("接下来把上例的正则改一下，"),a("code",[s._v("/ab{1,3}bbc/")]),s._v(" 匹配 abbbc，匹配的过程如下：\n"),a("img",{attrs:{src:"/images/regex-%E5%9B%9E%E6%BA%AF3.png",alt:"有回溯的正则2"}})]),s._v(" "),a("ol",[a("li",[s._v("正则从首位开始匹配字符串")]),s._v(" "),a("li",[s._v("正则中的 a 匹字符串中的 a")]),s._v(" "),a("li",[s._v("正则中的 b{1,3} 匹配字符串中的第一个 b")]),s._v(" "),a("li",[s._v("正则中的 b{1,3} 匹配字符串中的第二个 b")]),s._v(" "),a("li",[s._v("正则中的 b{1,3} 匹配字符串中的第三个 b")]),s._v(" "),a("li",[s._v("正则中的 b{1,3} 后面的 b 匹配字符串中的 c 时，不匹配")]),s._v(" "),a("li",[s._v("这里进行回溯，回到第 4 步")]),s._v(" "),a("li",[s._v("正则中的 b{1,3} 后面的第一个 b 匹配字符串中第三个 b")]),s._v(" "),a("li",[s._v("正则中的 b{1,3} 后面的第二个 b 匹配字符串中的 c 时，不匹配")]),s._v(" "),a("li",[s._v("这里进行回溯，回到第 3 步")]),s._v(" "),a("li",[s._v("正则中的 b{1,3} 后面的第一个 b 匹配字符串中的第二个 b")]),s._v(" "),a("li",[s._v("正则中的 b{1,3} 后面的第二个 b 匹配字符串中的第三个 b")]),s._v(" "),a("li",[s._v("正则中的 b{1,3} 后面的 c 匹配字符串中的 c，这时整个表达式匹配成功了。")])]),s._v(" "),a("h5",{attrs:{id:"案例三"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#案例三"}},[s._v("#")]),s._v(" 案例三")]),s._v(" "),a("p",[s._v("正则中的 "),a("code",[s._v(".*")]),s._v(" 是非常影响效率的，接下来利用 "),a("code",[s._v('/".*"/')]),s._v(' 来匹配 "abc"de 分析一下过程\n'),a("img",{attrs:{src:"/images/regex-%E5%9B%9E%E6%BA%AF4.png",alt:"有回溯的正则3"}})]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),a("p",[s._v("上面的正则改成 "),a("code",[s._v('/"[^"]"/')]),s._v(" 就会避免不必要的回溯。")])]),s._v(" "),a("h2",{attrs:{id:"三、常见的回溯形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、常见的回溯形式"}},[s._v("#")]),s._v(" 三、常见的回溯形式")]),s._v(" "),a("p",[s._v("前面着重介绍什么是回溯，那么那些情况可以产生回溯呢？")]),s._v(" "),a("h4",{attrs:{id:"_1、贪婪量词"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、贪婪量词"}},[s._v("#")]),s._v(" 1、贪婪量词")]),s._v(" "),a("p",[s._v("之前的例子中 "),a("code",[s._v("b{1,3}")]),s._v("，因为其是贪婪的，尝试可能的顺序是从多往少的方向去尝试。")]),s._v(" "),a("p",[s._v("那么将多个量词挨着存在，并相互冲突时，会怎么样？")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"12345"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/(\\d{1,3})(\\d{1,3})/")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ['12345','123','45', index: 0, input: '12345']")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面结果是第一个 "),a("code",[s._v("\\d{1,3}")]),s._v(" 匹的是 123， 而第二个 "),a("code",[s._v("\\d{1,3}")]),s._v(" 匹的是 45。所以可以得出的结论是"),a("strong",[s._v("先下手为强，因为是深度有限搜索")]),s._v("。")]),s._v(" "),a("h4",{attrs:{id:"_2、惰性量词"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、惰性量词"}},[s._v("#")]),s._v(" 2、惰性量词")]),s._v(" "),a("p",[s._v("惰性量词就是在贪婪量词后面加个问号，表示尽可能少的匹配")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'12345'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/(\\d{1,3}?)(\\d{1,3})/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ['12345','1','234', index: 0, input: '12345']")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("因为前面 "),a("code",[s._v("\\d{1,3}?")]),s._v(" 是惰性的，所以只给匹配了 1，那么怎么回溯呢？")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'12345'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/^(\\d{1,3}?)(\\d{1,3})$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ['12345', '12', '345', index: 0, input: '12345', groups: undefined]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("这里加入了 ^ 和 $， "),a("code",[s._v("\\d{1,3}?")]),s._v(" 匹配的结果就成了 12 了，"),a("strong",[s._v("原因是知道你不贪，很知足，但是为了整体的利益，只能给你多塞一个了")]),s._v("。")]),s._v(" "),a("h4",{attrs:{id:"_4、分支结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、分支结构"}},[s._v("#")]),s._v(" 4、分支结构")]),s._v(" "),a("p",[s._v("分支结构会一个一个去尝试，如果前面的满足了，后面的就不会再试验了，这种尝试也可以看成是一种回溯。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"candy"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/can|candy/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ['can', index: 0, input: 'candy', groups: undefined]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果正则改成下面的呢")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/^(?:can|candy)$/")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ['candy', index: 0, input: 'candy', groups: undefined]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 第一个分支不满意，就去匹配第二个分支")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("下面就是 "),a("code",[s._v("/^(?:can|candy)$/")]),s._v(" 回溯流程图\n"),a("img",{attrs:{src:"/images/regex-%E5%9B%9E%E6%BA%AF5.png",alt:"分支结构的回溯"}})]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("DFA 和 NFA")]),s._v(" "),a("p",[s._v("回溯的效率低一些，但是相对谁？")]),s._v(" "),a("ul",[a("li",[s._v("DFA引擎 （确定型有限自动机）")]),s._v(" "),a("li",[s._v("NFA引擎 （非确定性有限自动机）")])]),s._v(" "),a("p",[s._v("DFA中回溯就会快，但是不支持断言。具体详细可以研究编译原理，这里先挖个坑！！！")])])])}),[],!1,null,null,null);t.default=e.exports}}]);